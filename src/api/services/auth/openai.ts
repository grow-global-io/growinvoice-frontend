/**
 * Generated by orval v6.30.2 🍺
 * Do not edit manually.
 * Growinvoice API
 * Enhance your business with Growinvoice API
 * OpenAPI spec version: 1.0
 */
import { useMutation } from "@tanstack/react-query";
import type {
	MutationFunction,
	UseMutationOptions,
	UseMutationResult,
} from "@tanstack/react-query";
import type {
	OpenaiControllerCreate200Item,
	OpenaiControllerCreate201,
	RequestBodyOpenaiDto,
} from "./models";
import { authInstance } from "../../instances/authInstance";
import type { ErrorType } from "../../instances/authInstance";

export const openaiControllerCreate = (requestBodyOpenaiDto: RequestBodyOpenaiDto) => {
	return authInstance<OpenaiControllerCreate200Item[] | OpenaiControllerCreate201>({
		url: `/api/openai`,
		method: "POST",
		headers: { "Content-Type": "application/json" },
		data: requestBodyOpenaiDto,
	});
};

export const getOpenaiControllerCreateMutationOptions = <
	TError = ErrorType<unknown>,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof openaiControllerCreate>>,
		TError,
		{ data: RequestBodyOpenaiDto },
		TContext
	>;
}): UseMutationOptions<
	Awaited<ReturnType<typeof openaiControllerCreate>>,
	TError,
	{ data: RequestBodyOpenaiDto },
	TContext
> => {
	const { mutation: mutationOptions } = options ?? {};

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof openaiControllerCreate>>,
		{ data: RequestBodyOpenaiDto }
	> = (props) => {
		const { data } = props ?? {};

		return openaiControllerCreate(data);
	};

	return { mutationFn, ...mutationOptions };
};

export type OpenaiControllerCreateMutationResult = NonNullable<
	Awaited<ReturnType<typeof openaiControllerCreate>>
>;
export type OpenaiControllerCreateMutationBody = RequestBodyOpenaiDto;
export type OpenaiControllerCreateMutationError = ErrorType<unknown>;

export const useOpenaiControllerCreate = <
	TError = ErrorType<unknown>,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof openaiControllerCreate>>,
		TError,
		{ data: RequestBodyOpenaiDto },
		TContext
	>;
}): UseMutationResult<
	Awaited<ReturnType<typeof openaiControllerCreate>>,
	TError,
	{ data: RequestBodyOpenaiDto },
	TContext
> => {
	const mutationOptions = getOpenaiControllerCreateMutationOptions(options);

	return useMutation(mutationOptions);
};
