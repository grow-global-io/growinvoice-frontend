/**
 * Generated by orval v6.29.1 🍺
 * Do not edit manually.
 * Growinvoice API
 * Enhance your business with Growinvoice API
 * OpenAPI spec version: 1.0
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
	MutationFunction,
	QueryFunction,
	QueryKey,
	UseMutationOptions,
	UseMutationResult,
	UseQueryOptions,
	UseQueryResult,
} from "@tanstack/react-query";
import type {
	CreateQuotationWithProducts,
	Quotation,
	QuotationControllerCreate201,
	QuotationControllerUpdate200,
	QuotationWithAllDataDto,
	SuccessResponseDto,
	UpdateQuotationWithProducts,
} from "./models";
import { authInstance } from "../../instances/authInstance";
import type { ErrorType } from "../../instances/authInstance";

export const quotationControllerCreate = (
	createQuotationWithProducts: CreateQuotationWithProducts,
) => {
	return authInstance<QuotationControllerCreate201>({
		url: `/api/quotation`,
		method: "POST",
		headers: { "Content-Type": "application/json" },
		data: createQuotationWithProducts,
	});
};

export const getQuotationControllerCreateMutationOptions = <
	TError = ErrorType<unknown>,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof quotationControllerCreate>>,
		TError,
		{ data: CreateQuotationWithProducts },
		TContext
	>;
}): UseMutationOptions<
	Awaited<ReturnType<typeof quotationControllerCreate>>,
	TError,
	{ data: CreateQuotationWithProducts },
	TContext
> => {
	const { mutation: mutationOptions } = options ?? {};

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof quotationControllerCreate>>,
		{ data: CreateQuotationWithProducts }
	> = (props) => {
		const { data } = props ?? {};

		return quotationControllerCreate(data);
	};

	return { mutationFn, ...mutationOptions };
};

export type QuotationControllerCreateMutationResult = NonNullable<
	Awaited<ReturnType<typeof quotationControllerCreate>>
>;
export type QuotationControllerCreateMutationBody = CreateQuotationWithProducts;
export type QuotationControllerCreateMutationError = ErrorType<unknown>;

export const useQuotationControllerCreate = <
	TError = ErrorType<unknown>,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof quotationControllerCreate>>,
		TError,
		{ data: CreateQuotationWithProducts },
		TContext
	>;
}): UseMutationResult<
	Awaited<ReturnType<typeof quotationControllerCreate>>,
	TError,
	{ data: CreateQuotationWithProducts },
	TContext
> => {
	const mutationOptions = getQuotationControllerCreateMutationOptions(options);

	return useMutation(mutationOptions);
};
export const quotationControllerFindAll = (signal?: AbortSignal) => {
	return authInstance<Quotation[]>({ url: `/api/quotation`, method: "GET", signal });
};

export const getQuotationControllerFindAllQueryKey = () => {
	return [`/api/quotation`] as const;
};

export const getQuotationControllerFindAllQueryOptions = <
	TData = Awaited<ReturnType<typeof quotationControllerFindAll>>,
	TError = ErrorType<unknown>,
>(options?: {
	query?: Partial<
		UseQueryOptions<Awaited<ReturnType<typeof quotationControllerFindAll>>, TError, TData>
	>;
}) => {
	const { query: queryOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getQuotationControllerFindAllQueryKey();

	const queryFn: QueryFunction<Awaited<ReturnType<typeof quotationControllerFindAll>>> = ({
		signal,
	}) => quotationControllerFindAll(signal);

	return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
		Awaited<ReturnType<typeof quotationControllerFindAll>>,
		TError,
		TData
	> & { queryKey: QueryKey };
};

export type QuotationControllerFindAllQueryResult = NonNullable<
	Awaited<ReturnType<typeof quotationControllerFindAll>>
>;
export type QuotationControllerFindAllQueryError = ErrorType<unknown>;

export const useQuotationControllerFindAll = <
	TData = Awaited<ReturnType<typeof quotationControllerFindAll>>,
	TError = ErrorType<unknown>,
>(options?: {
	query?: Partial<
		UseQueryOptions<Awaited<ReturnType<typeof quotationControllerFindAll>>, TError, TData>
	>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
	const queryOptions = getQuotationControllerFindAllQueryOptions(options);

	const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

	query.queryKey = queryOptions.queryKey;

	return query;
};

export const quotationControllerFindOne = (id: string, signal?: AbortSignal) => {
	return authInstance<QuotationWithAllDataDto>({
		url: `/api/quotation/${id}`,
		method: "GET",
		signal,
	});
};

export const getQuotationControllerFindOneQueryKey = (id: string) => {
	return [`/api/quotation/${id}`] as const;
};

export const getQuotationControllerFindOneQueryOptions = <
	TData = Awaited<ReturnType<typeof quotationControllerFindOne>>,
	TError = ErrorType<unknown>,
>(
	id: string,
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof quotationControllerFindOne>>, TError, TData>
		>;
	},
) => {
	const { query: queryOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getQuotationControllerFindOneQueryKey(id);

	const queryFn: QueryFunction<Awaited<ReturnType<typeof quotationControllerFindOne>>> = ({
		signal,
	}) => quotationControllerFindOne(id, signal);

	return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
		Awaited<ReturnType<typeof quotationControllerFindOne>>,
		TError,
		TData
	> & { queryKey: QueryKey };
};

export type QuotationControllerFindOneQueryResult = NonNullable<
	Awaited<ReturnType<typeof quotationControllerFindOne>>
>;
export type QuotationControllerFindOneQueryError = ErrorType<unknown>;

export const useQuotationControllerFindOne = <
	TData = Awaited<ReturnType<typeof quotationControllerFindOne>>,
	TError = ErrorType<unknown>,
>(
	id: string,
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof quotationControllerFindOne>>, TError, TData>
		>;
	},
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
	const queryOptions = getQuotationControllerFindOneQueryOptions(id, options);

	const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

	query.queryKey = queryOptions.queryKey;

	return query;
};

export const quotationControllerUpdate = (
	id: string,
	updateQuotationWithProducts: UpdateQuotationWithProducts,
) => {
	return authInstance<QuotationControllerUpdate200>({
		url: `/api/quotation/${id}`,
		method: "PATCH",
		headers: { "Content-Type": "application/json" },
		data: updateQuotationWithProducts,
	});
};

export const getQuotationControllerUpdateMutationOptions = <
	TError = ErrorType<unknown>,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof quotationControllerUpdate>>,
		TError,
		{ id: string; data: UpdateQuotationWithProducts },
		TContext
	>;
}): UseMutationOptions<
	Awaited<ReturnType<typeof quotationControllerUpdate>>,
	TError,
	{ id: string; data: UpdateQuotationWithProducts },
	TContext
> => {
	const { mutation: mutationOptions } = options ?? {};

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof quotationControllerUpdate>>,
		{ id: string; data: UpdateQuotationWithProducts }
	> = (props) => {
		const { id, data } = props ?? {};

		return quotationControllerUpdate(id, data);
	};

	return { mutationFn, ...mutationOptions };
};

export type QuotationControllerUpdateMutationResult = NonNullable<
	Awaited<ReturnType<typeof quotationControllerUpdate>>
>;
export type QuotationControllerUpdateMutationBody = UpdateQuotationWithProducts;
export type QuotationControllerUpdateMutationError = ErrorType<unknown>;

export const useQuotationControllerUpdate = <
	TError = ErrorType<unknown>,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof quotationControllerUpdate>>,
		TError,
		{ id: string; data: UpdateQuotationWithProducts },
		TContext
	>;
}): UseMutationResult<
	Awaited<ReturnType<typeof quotationControllerUpdate>>,
	TError,
	{ id: string; data: UpdateQuotationWithProducts },
	TContext
> => {
	const mutationOptions = getQuotationControllerUpdateMutationOptions(options);

	return useMutation(mutationOptions);
};
export const quotationControllerRemove = (id: string) => {
	return authInstance<SuccessResponseDto>({ url: `/api/quotation/${id}`, method: "DELETE" });
};

export const getQuotationControllerRemoveMutationOptions = <
	TError = ErrorType<unknown>,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof quotationControllerRemove>>,
		TError,
		{ id: string },
		TContext
	>;
}): UseMutationOptions<
	Awaited<ReturnType<typeof quotationControllerRemove>>,
	TError,
	{ id: string },
	TContext
> => {
	const { mutation: mutationOptions } = options ?? {};

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof quotationControllerRemove>>,
		{ id: string }
	> = (props) => {
		const { id } = props ?? {};

		return quotationControllerRemove(id);
	};

	return { mutationFn, ...mutationOptions };
};

export type QuotationControllerRemoveMutationResult = NonNullable<
	Awaited<ReturnType<typeof quotationControllerRemove>>
>;

export type QuotationControllerRemoveMutationError = ErrorType<unknown>;

export const useQuotationControllerRemove = <
	TError = ErrorType<unknown>,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof quotationControllerRemove>>,
		TError,
		{ id: string },
		TContext
	>;
}): UseMutationResult<
	Awaited<ReturnType<typeof quotationControllerRemove>>,
	TError,
	{ id: string },
	TContext
> => {
	const mutationOptions = getQuotationControllerRemoveMutationOptions(options);

	return useMutation(mutationOptions);
};
